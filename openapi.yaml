openapi: 3.0.0
info:
  version: 1.0.0
  title: LifterLMS REST API
  description: |-
    # Introduction
    LifterLMS (LLMS) is fully integrated with the [WordPress REST API](https://developer.wordpress.org/rest-api/). This allows LifterLMS data to be created, read, updated, and deleted using requests in JSON format and using WordPress REST API Authentication methods and standard HTTP verbs which are understood by most HTTP clients.
    ## Requirements
    To use the latest version of the REST API you must be using the following:

      + LifterLMS [@version]+.
      + WordPress 5.2+.
      + Pretty permalinks in `Settings -> Permalinks` so that the custom endpoints are supported. **Default permalinks will not work.**
      + An SSL certificate.

    ## Errors
    asrtasrtarst
    ## Pagination
    asrtastarstarst
    # Authentication
    Lorem ipsum...
    <!-- ReDoc-Inject: <security-definitions> -->
  x-logo:
    altText: LifterLMS
    url: 'https://gocodebox.github.io/lifterlms-brand/assets/img/png/logo/lifterlms-logo.png'
    href: 'https://lifterlms.com/'
servers:
  - url: /wp-json/llms/v1
security:
  - BasicAuth: []
tags:
  - name: Courses
    description: |
      The courses API allows you to create, view, update, and delete courses.
  - name: Students
    description: |
      Students are members of your site who are (or were) enrolled in your courses and memberships. Students can be any WordPress user account on your site (not exclusively the "student" role).

      The students API allows you to create, view, update, and delete student accounts.
  - name: Student Enrollments
    description: |
      Enrollments are used to track a student's access to content on your website.

      The student enrollments API allows you to create, view, update, and delete student enrollments.
x-tagGroups:
  - name: Courses
    tags:
      - Courses
  - name: Students
    tags:
      - Students
      - Student Enrollments
paths:
  /courses:
    get:
      summary: List courses
      description: Retrieve a list of courses.
      tags:
        - Courses
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Order'
        - name: orderby
          description: Specify the sort field for a collection of results.
          in: query
          required: false
          schema:
            type: string
            enum:
              - id
              - title
            default: id
      responses:
        '200':
          description: Successfully returned a list of courses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
    post:
      summary: Create a course
      description: Create a new course object.
      tags:
        - Courses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '201':
          description: Successfully created the student.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
  '/courses/{id}':
    parameters:
      - name: id
        description: The course ID.
        example: 123
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve a course
      description: Retrieve the details of an existing course.
      tags:
        - Courses
      responses:
        '200':
          description: Successfully retrieved the student.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
    post:
      summary: Update a course
      description: Update the specified course by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
      tags:
        - Courses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: Successfully updated the student.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
    delete:
      summary: Delete a course
      description: Delete an existing course.
      tags:
        - Courses
      responses:
        '204':
          description: Successfully deleted the student.
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
  /students:
    get:
      summary: List students
      description: Retrieves a list of all students.
      tags:
        - Students
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Order'
        - name: orderby
          description: Specify the sort field for a collection of results.
          in: query
          required: false
          schema:
            type: string
            enum:
              - id
              - email
            default: id
        - name: enrolled_in
          description: 'Retrieve only students enrolled in the specified course(s) and/or membership(s). Accepts an array of [WP_Post](https://codex.wordpress.org/Class_Reference/WP_Post) IDs.'
          in: query
          required: false
          schema:
            type: array
            default: null
            items:
              type: integer
        - name: enrolled_not_in
          description: 'Retrieve only students not enrolled in the specified course(s) and/or membership(s). Accepts an array of [WP_Post](https://codex.wordpress.org/Class_Reference/WP_Post) IDs.'
          in: query
          required: false
          schema:
            type: array
            default: null
            items:
              type: integer
      responses:
        '200':
          description: Successfully returned a list of students
          headers:
            X-WP-Total:
              $ref: '#/components/headers/PaginationTotalResults'
            X-WP-TotalPages:
              $ref: '#/components/headers/PaginationTotalPages'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
    post:
      summary: Create a student
      description: Creates a new student object.
      tags:
        - Students
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '201':
          description: Successfully created the student.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
  '/students/{id}':
    parameters:
      - name: id
        description: The student's ID.
        example: 123
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve a student
      description: Retrieve the details of an existing student.
      tags:
        - Students
      responses:
        '200':
          description: Successfully retrieved the student.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
    post:
      summary: Update a student
      description: Update the specified student by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
      tags:
        - Students
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: Successfully updated the student.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
    delete:
      summary: Delete a student
      description: Delete an existing student.
      tags:
        - Students
      responses:
        '204':
          description: Successfully deleted the student.
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
  '/students/{id}/enrollments':
    parameters:
      - name: id
        description: The student's ID.
        example: 123
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: List student enrollments
      description: Retrieve a list of enrollments for a student.
      tags:
        - Student Enrollments
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Order'
        - name: orderby
          description: Specify the sort field for a collection of results.
          in: query
          required: false
          schema:
            type: string
            enum:
              - id
              - student_id
              - post_id
              - created_date
            default: id
        - name: post_in
          description: 'Include only enrollments for the specified course(s) and/or membership(s). Accepts an array of [WP_Post](https://codex.wordpress.org/Class_Reference/WP_Post) IDs.'
          in: query
          required: false
          schema:
            type: array
            default: null
            items:
              type: integer
        - name: post_not_in
          description: 'Exclude enrollments for the specified course(s) and/or membership(s). Accepts an array of [WP_Post](https://codex.wordpress.org/Class_Reference/WP_Post) IDs.'
          in: query
          required: false
          schema:
            type: array
            default: null
            items:
              type: integer
      responses:
        '200':
          description: Successully retrieved student enrollments.
          headers:
            X-WP-Total:
              $ref: '#/components/headers/PaginationTotalResults'
            X-WP-TotalPages:
              $ref: '#/components/headers/PaginationTotalPages'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Enrollment'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
    post:
      summary: Create a new enrollment
      description: Creates a new enrollment for a student.
      tags:
        - Student Enrollments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Enrollment'
      responses:
        '201':
          description: Successfully created the enrollment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrollment'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
  '/students/{id}/enrollments/{enrollmentId}':
    parameters:
      - name: id
        description: The student's ID.
        example: 123
        in: path
        required: true
        schema:
          type: integer
      - name: enrollmentId
        description: The ID of the enrollment.
        example: 456
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve an enrollment
      description: Retrieve the details of an existing enrollment.
      tags:
        - Student Enrollments
      responses:
        '200':
          description: Successfully retrieved the enrollment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrollment'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
    post:
      summary: Update an enrollment
      description: Update the specified enrollment by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
      tags:
        - Student Enrollments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Enrollment'
                - type: object
                  required:
                    - status
                  properties:
                    post_id:
                      readOnly: true
      responses:
        '200':
          description: Successfully updated the enrollment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrollment'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
    delete:
      summary: Delete an enrollment.
      description: Delete an existing enrollment.
      tags:
        - Student Enrollments
      responses:
        '204':
          description: Successfully deleted the enrollment.
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
        '404':
          $ref: '#/components/responses/Error404'
components:
  schemas:
    Address:
      type: object
      properties:
        address_1:
          description: Address line 1.
          type: string
          example: 1234 Somewhere Place
        address_2:
          description: Address line 2.
          type: string
          example: Suite ABC
        city:
          description: City name.
          type: string
          example: Anywhere
        state:
          description: 'ISO code or state, province, or district name.'
          type: string
          example: CA
        postcode:
          description: Postal code.
          type: string
          example: 12345-678
        country:
          description: ISO country code.
          type: string
          example: US
    Course:
      type: object
      required:
        - id
      properties:
        id:
          description: The unique course ID.
          type: integer
          minimum: 1
          example: 789
          readOnly: true
        title:
          description: The title of the course.
          type: string
          example: Getting Started with LifterLMS
        content:
          description: The raw HTML content of the course.
          type: string
          example: '<h2>Primum cur ista res digna odio est</h2><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam si propter voluptatem, quae est ista laus, quae possit e macello peti.</p>'
        date_created:
          description: 'The course creation date. Format: `Y-m-d H:i:s`'
          type: string
          example: '2019-05-20 17:22:05'
        date_created_gmt:
          description: 'The course creation date (in GMT). Format: `Y-m-d H:i:s`'
          type: string
          example: '2019-05-20 13:22:05'
          readOnly: true
        date_updated:
          description: 'Date of the last course update. Format: `Y-m-d H:i:s`'
          type: string
          example: '2019-05-20 17:25:05'
        date_updated_gmt:
          description: 'Date of the last course update (in GMT). Format: `Y-m-d H:i:s`'
          type: string
          example: '2019-05-20 13:25:05'
          readOnly: true
        status:
          description: The publication status of the course.
          type: string
          enum:
            - publish
            - pending
            - draft
            - auto-draft
            - future
            - private
            - trash
          default: publish
    Enrollment:
      type: object
      required:
        - id
        - student_id
        - post_id
      properties:
        id:
          description: The unique ID of the enrollment.
          type: integer
          minimum: 1
          example: 987
          readOnly: true
        student_id:
          description: The ID of the student.
          type: integer
          minimum: 1
          example: 123
          readOnly: true
        post_id:
          description: The ID of the course/membership.
          type: integer
          minimum: 1
          example: 456
        date_created:
          description: 'The enrollment creation date. Format: `Y-m-d H:i:s`'
          type: string
          example: '2019-05-21 14:22:05'
        date_updated:
          description: 'The date of the last enrollment update. Format: `Y-m-d H:i:s`'
          type: string
          example: '2019-05-21 19:22:05'
        status:
          description: The status of the enrollment.
          type: string
          default: enrolled
          example: enrolled
          enum:
            - enrolled
            - cancelled
            - expired
        _links:
          readOnly: true
          type: object
          properties:
            self:
              description: REST URI to the enrollment.
              type: array
              items:
                type: object
                properties:
                  href:
                    type: string
                    example: /students/123/enrollments/987
            collection:
              description: REST URI to the student's enrollments collection.
              type: array
              items:
                type: object
                properties:
                  href:
                    type: string
                    example: /students/123/enrollments/
    Error:
      type: object
      properties:
        code:
          description: The API error code.
          type: string
          enum:
            - llms_rest_bad_request
          default: llms_rest_bad_request
          example: llms_rest_bad_request
        message:
          description: The API error message.
          type: string
          example: Invalid request.
        data:
          description: Additional response data.
          type: object
          properties:
            status:
              type: integer
              minimum: 100
              maximum: 600
              example: 400
              description: The HTTP status code.
    Error400:
      type: object
      properties:
        code:
          description: The API error code.
          type: string
          example: llms_rest_bad_request
        message:
          description: The API error message.
          type: string
          example: Bad request.
        data:
          description: Additional response data.
          type: object
          properties:
            status:
              description: The HTTP status code.
              type: integer
              example: 400
    Error401:
      type: object
      properties:
        code:
          description: The API error code.
          type: string
          example: llms_rest_unauthorized_request
        message:
          description: The API error message.
          type: string
          example: The API credentials were invalid.
        data:
          description: Additional response data.
          type: object
          properties:
            status:
              description: The HTTP status code.
              type: integer
              example: 401
    Error403:
      type: object
      properties:
        code:
          description: The API error code.
          type: string
          example: llms_rest_forbidden_request
        message:
          description: The API error message.
          type: string
          example: User is authorized to perform this request.
        data:
          description: Additional response data.
          type: object
          properties:
            status:
              description: The HTTP status code.
              type: integer
              example: 403
    Error404:
      type: object
      properties:
        code:
          description: The API error code.
          type: string
          example: llms_rest_not_found
        message:
          description: The API error message.
          type: string
          example: The requested resource could not be found.
        data:
          description: Additional response data.
          type: object
          properties:
            status:
              description: The HTTP status code.
              type: integer
              example: 404
    PersonName:
      type: object
      properties:
        first:
          description: The person's first name.
          type: string
          example: Jamie
        last:
          description: The person's last name.
          type: string
          example: Cook
        display:
          description: The person's public display name.
          type: string
          example: Jamie Cook
    Student:
      type: object
      required:
        - id
        - email
        - username
      properties:
        id:
          description: The unique student ID.
          type: integer
          minimum: 1
          example: 1234
          readOnly: true
        email:
          description: The student's email address.
          type: string
          example: jamie@lifterlms.com
        username:
          description: The student's username.
          type: string
          example: jamie2019
        password:
          description: The student's password.
          type: string
          example: my_l337-p@s5w0rd!
          writeOnly: true
        role:
          description: The student's WordPress user role.
          type: string
          example: student
          default: student
        name:
          $ref: '#/components/schemas/PersonName'
        billing_address:
          $ref: '#/components/schemas/Address'
        _links:
          type: object
          properties:
            self:
              description: REST URI to the student.
              type: array
              items:
                type: object
                properties:
                  href:
                    type: string
                    example: /students/1234
            collection:
              description: REST URI to the student collection.
              type: array
              items:
                type: object
                properties:
                  href:
                    type: string
                    example: /students
  responses:
    Error400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error400'
    Error401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error401'
    Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error403'
    Error404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error404'
  parameters:
    Order:
      name: order
      in: query
      description: Specifcy the sort order for a collection of results.
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
        default: asc
    Page:
      name: page
      in: query
      description: Specify the page number for a paginated collection.
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    PerPage:
      name: per_page
      in: query
      description: Specify the number of results per paginated collection page.
      required: false
      schema:
        type: integer
        minimum: 1
        default: 10
  headers:
    PaginationTotalPages:
      description: Total number of pages available in the collection.
      schema:
        type: integer
        example: 28
    PaginationTotalResults:
      description: Total number of results found in the collection.
      schema:
        type: integer
        example: 275
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
