{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "LifterLMS REST API",
    "description": "# Introduction\nLifterLMS (LLMS) is fully integrated with the [WordPress REST API](https://developer.wordpress.org/rest-api/). This allows LifterLMS data to be created, read, updated, and deleted using requests in JSON format and using WordPress REST API Authentication methods and standard HTTP verbs which are understood by most HTTP clients.\n## Requirements\nTo use the latest version of the REST API you must be using the following:\n\n  + LifterLMS [@version]+.\n  + WordPress 5.2+.\n  + Pretty permalinks in `Settings -> Permalinks` so that the custom endpoints are supported. **Default permalinks will not work.**\n  + An SSL certificate.\n\n## Errors\nasrtasrtarst\n# Authentication\nLorem ipsum...\n<!-- ReDoc-Inject: <security-definitions> -->",
    "x-logo": {
      "altText": "LifterLMS",
      "url": "https://gocodebox.github.io/lifterlms-brand/assets/img/png/logo/lifterlms-logo.png",
      "href": "https://lifterlms.com/"
    }
  },
  "servers": [
    {
      "url": "/wp-json/llms/v1"
    }
  ],
  "security": [
    {
      "BasicAuth": []
    }
  ],
  "tags": [
    {
      "name": "Access Plans",
      "description": "Access plans allow you to define how LMS content is purchased and accessed by your students.\n\nThe access plans API allows you to create, view, update, and delete courses.\n"
    },
    {
      "name": "Courses",
      "description": "The courses API allows you to create, view, update, and delete courses.\n"
    },
    {
      "name": "Enrollments",
      "description": "Enrollments are used to track a student's access to content on your website.\n\nThe enrollments API allows you to create, view, update, and delete student enrollments.\n"
    },
    {
      "name": "Instructors",
      "description": "Instructors are members of your site who have the ability to create and manage LMS content and students. Instructors may be Adminstators, LMS Managers, Instructors, and Instructors Assistants.\n\nThe instructors API allows you to create, view, update, and delete student accounts.\n"
    },
    {
      "name": "Students",
      "description": "Students are members of your site who are (or were) enrolled in your courses and memberships. Students can be any WordPress user account on your site (not exclusively the \"student\" role).\n\nThe students API allows you to create, view, update, and delete student accounts  as well as view information about the student's LMS content.\n"
    }
  ],
  "paths": {
    "/access-plans": {
      "get": {
        "summary": "List access plans",
        "description": "Retrieve a list of access plans.",
        "tags": [
          "Access Plans"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "title",
                "date_created",
                "date_updated",
                "menu_order"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of access plans.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/access-plans?page=1>; rel=\"first\", </wp-json/llms/v1/access-plans?page=2>; rel=\"prev\", </wp-json/llms/v1/access-plans?page=4>; rel=\"next\", </wp-json/llms/v1/access-plans?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessPlan"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        }
      },
      "post": {
        "summary": "Create an access plan",
        "description": "Create a new access plan object.",
        "tags": [
          "Access Plans"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessPlan"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the student.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessPlan"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        }
      }
    },
    "/courses": {
      "get": {
        "summary": "List courses",
        "description": "Retrieve a list of courses.",
        "tags": [
          "Courses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "title",
                "date_created",
                "date_updated",
                "menu_order"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of courses.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/courses?page=1>; rel=\"first\", </wp-json/llms/v1/courses?page=2>; rel=\"prev\", </wp-json/llms/v1/courses?page=4>; rel=\"next\", </wp-json/llms/v1/courses?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourseResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        }
      },
      "post": {
        "summary": "Create a course",
        "description": "Create a new course object.",
        "tags": [
          "Courses"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CourseRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the course.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        }
      }
    },
    "/courses/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Unique Course Identifier. The WordPress Post `ID`.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a course",
        "description": "Retrieve the details of an existing course.",
        "tags": [
          "Courses"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/PostPassword"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the course.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        }
      },
      "post": {
        "summary": "Update a course",
        "description": "Update the specified course by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "Courses"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CourseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the course.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        }
      },
      "delete": {
        "summary": "Delete a course",
        "description": "Delete an existing course.",
        "tags": [
          "Courses"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "description": "Bypass the trash and force course deletion.",
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully deleted the course."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        }
      }
    },
    "/enrollments": {
      "get": {
        "summary": "List enrollments",
        "description": "Retrieve a list of enrollments.",
        "tags": [
          "Enrollments"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "date_created",
                "date_updated",
                "post_id",
                "student_id"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          },
          {
            "name": "student",
            "description": "Retrieve enrollments for a specific list of one or more students. Accepts a student id or comma separted list of student ids.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "123,456"
            }
          },
          {
            "name": "student_exclude",
            "description": "Exclude enrollments for a specific list of one or more students. Accepts a student id or comma separted list of student ids.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "789,324"
            }
          },
          {
            "name": "post",
            "description": "Retrieve enrollments for a specific list of one or more posts. Accepts a student id or comma separted list of student ids.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "123,456"
            }
          },
          {
            "name": "post_exclude",
            "description": "Exclude enrollments for a specific list of one or more posts. Accepts a student id or comma separted list of student ids.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "789,324"
            }
          },
          {
            "$ref": "#/components/parameters/PostType"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of enrollments.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/enrollments?page=1>; rel=\"first\", </wp-json/llms/v1/enrollments?page=2>; rel=\"prev\", </wp-json/llms/v1/enrollments?page=4>; rel=\"next\", </wp-json/llms/v1/enrollments?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Enrollment"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        }
      },
      "post": {
        "summary": "Create an enrollment",
        "description": "Create a new course object.",
        "tags": [
          "Enrollments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Enrollment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the enrollment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Enrollment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        }
      }
    },
    "/enrollments/{id}": {
      "parameters": [
        {
          "name": "id",
          "description": "Unique enrollment Identifier.",
          "example": 987,
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a enrollment",
        "description": "Retrieve the details of an existing enrollment.",
        "tags": [
          "Enrollments"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the enrollment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Enrollment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        }
      },
      "post": {
        "summary": "Update an enrollment",
        "description": "Update the specified enrollment by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "Enrollments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Enrollment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the student.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Enrollment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        }
      },
      "delete": {
        "summary": "Delete an enrollment",
        "description": "Delete an existing enrollment.",
        "tags": [
          "Enrollments"
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the student."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        }
      }
    },
    "/instructors": {
      "get": {
        "summary": "List instructors",
        "description": "Retrieves a list of all instructors.",
        "tags": [
          "Instructors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "email"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          },
          {
            "name": "post",
            "description": "Include only instructors for the specified post(s). Acceps a single `id` or a comma separated list of `ids`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "8,9,10"
            }
          },
          {
            "name": "post_not_in",
            "description": "Exclude instructors for the specified post(s). Acceps a single `id` or a comma separated list of `ids`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "11,12,13"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of instructors",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/instructors?page=1>; rel=\"first\", </wp-json/llms/v1/instructors?page=2>; rel=\"prev\", </wp-json/llms/v1/instructors?page=4>; rel=\"next\", </wp-json/llms/v1/instructors?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Instructor"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        }
      },
      "post": {
        "summary": "Create an instructor",
        "description": "Creates a new instructor object.",
        "tags": [
          "Instructors"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Instructor"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the instructor.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instructor"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        }
      }
    },
    "/instructors/{id}": {
      "parameters": [
        {
          "name": "id",
          "description": "Unique Instructor Identifer. The WordPress User `ID`.",
          "example": 123,
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Retrieve an instructor",
        "description": "Retrieve the details of an existing instructor.",
        "tags": [
          "Instructors"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the instructor.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instructor"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        }
      },
      "post": {
        "summary": "Update an instructor",
        "description": "Update the specified instructor by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "Instructors"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Instructor"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the instructor.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instructor"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        }
      },
      "delete": {
        "summary": "Delete an instructor",
        "description": "Delete an existing instructor.",
        "tags": [
          "Instructors"
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the instructor."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        }
      }
    },
    "/instructors/{id}/content": {
      "parameters": [
        {
          "name": "id",
          "description": "The instructor's ID.",
          "example": 123,
          "in": "path",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "summary": "List an instructor's content",
        "description": "Retrieves a list of all the instructor's LMS content.",
        "tags": [
          "Instructors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "email"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          },
          {
            "name": "post",
            "description": "Retrieve content for a specific list of one or more posts. Accepts a post `id` or comma separted list of post `id`s.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "123,456"
            }
          },
          {
            "name": "post_exclude",
            "description": "Exclude content for a specific list of one or more posts. Accepts a post `id` or comma separted list of post `id`s.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "789,324"
            }
          },
          {
            "$ref": "#/components/parameters/PostType"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of the instructor's content.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/instructors/123/content?page=1>; rel=\"first\", </wp-json/llms/v1/instructors/123/content?page=2>; rel=\"prev\", </wp-json/llms/v1/instructors/123/content?page=4>; rel=\"next\", </wp-json/llms/v1/instructors/123/content?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Course"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        }
      }
    },
    "/students": {
      "get": {
        "summary": "List students",
        "description": "Retrieves a list of all students.",
        "tags": [
          "Students"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "email"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          },
          {
            "name": "enrolled_in",
            "description": "Retrieve only students enrolled in the specified course(s) and/or membership(s). Accepts an array of [WP_Post](https://codex.wordpress.org/Class_Reference/WP_Post) IDs.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "enrolled_not_in",
            "description": "Retrieve only students not enrolled in the specified course(s) and/or membership(s). Accepts an array of [WP_Post](https://codex.wordpress.org/Class_Reference/WP_Post) IDs.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of students",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/students?page=1>; rel=\"first\", </wp-json/llms/v1/students?page=2>; rel=\"prev\", </wp-json/llms/v1/students?page=4>; rel=\"next\", </wp-json/llms/v1/students?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Student"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        }
      },
      "post": {
        "summary": "Create a student",
        "description": "Creates a new student object.",
        "tags": [
          "Students"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Student"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the student.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        }
      }
    },
    "/students/{id}": {
      "parameters": [
        {
          "name": "id",
          "description": "Unique student Identifer. The WordPress User `ID`.",
          "example": 123,
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "Retrieve a student",
        "description": "Retrieve the details of an existing student.",
        "tags": [
          "Students"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the student.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        }
      },
      "post": {
        "summary": "Update a student",
        "description": "Update the specified student by setting the values of the parameters passed. Any parameters not provided will be left unchanged.",
        "tags": [
          "Students"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Student"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the student.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        }
      },
      "delete": {
        "summary": "Delete a student",
        "description": "Delete an existing student.",
        "tags": [
          "Students"
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the student."
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "404": {
            "$ref": "#/components/responses/Error404"
          }
        }
      }
    },
    "/students/{id}/content": {
      "parameters": [
        {
          "name": "id",
          "description": "Unique student Identifer. The WordPress User `ID`.",
          "example": 123,
          "in": "path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "summary": "List a student's content",
        "description": "Retrieves a list of all content available to a student via enrollments.",
        "tags": [
          "Students"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Order"
          },
          {
            "name": "orderby",
            "description": "Specify the sort field for a collection of results.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "email"
              ],
              "default": "id"
            }
          },
          {
            "$ref": "#/components/parameters/Include"
          },
          {
            "$ref": "#/components/parameters/Exclude"
          },
          {
            "$ref": "#/components/parameters/EnrollmentStatus"
          },
          {
            "name": "post",
            "description": "Retrieve content for a specific list of one or more posts. Accepts a post `id` or comma separted list of post `id`s.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "123,456"
            }
          },
          {
            "name": "post_exclude",
            "description": "Exclude content for a specific list of one or more posts. Accepts a post `id` or comma separted list of post `id`s.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "789,324"
            }
          },
          {
            "$ref": "#/components/parameters/PostType"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of the student's content.",
            "headers": {
              "Link": {
                "description": "Pagination links for the collection.",
                "schema": {
                  "type": "string",
                  "example": "</wp-json/llms/v1/students/123/content?page=1>; rel=\"first\", </wp-json/llms/v1/students/123/content?page=2>; rel=\"prev\", </wp-json/llms/v1/students/123/content?page=4>; rel=\"next\", </wp-json/llms/v1/students/123/content?page=5>; rel=\"last\""
                }
              },
              "X-WP-Total": {
                "$ref": "#/components/headers/PaginationTotalResults"
              },
              "X-WP-TotalPages": {
                "$ref": "#/components/headers/PaginationTotalPages"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Course"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessPlan": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "price"
            ],
            "properties": {
              "id": {
                "readOnly": true,
                "description": "Unique Access Plan Identifier. The WordPress Post `ID`."
              },
              "price": {
                "description": "Access plan price.",
                "type": "number",
                "format": "float",
                "minimum": 0,
                "default": 0,
                "example": 199.97
              },
              "enroll_text": {
                "description": "Text of the \"Purchase\" button",
                "type": "string",
                "default": "Buy Now"
              }
            }
          },
          {
            "$ref": "#/components/schemas/Post"
          }
        ]
      },
      "Address": {
        "type": "object",
        "properties": {
          "address_1": {
            "description": "Address line 1.",
            "type": "string",
            "example": "1234 Somewhere Place"
          },
          "address_2": {
            "description": "Address line 2.",
            "type": "string",
            "example": "Suite ABC"
          },
          "city": {
            "description": "City name.",
            "type": "string",
            "example": "Anywhere"
          },
          "state": {
            "description": "ISO code or state, province, or district name.",
            "type": "string",
            "example": "CA"
          },
          "postcode": {
            "description": "Postal code.",
            "type": "string",
            "example": "12345-678"
          },
          "country": {
            "description": "ISO country code.",
            "type": "string",
            "example": "US"
          }
        }
      },
      "Course": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PostPublic"
          },
          {
            "type": "object",
            "properties": {
              "permalink": {
                "example": "https://example.com/course/getting-started-with-lifterlms"
              },
              "post_type": {
                "default": "course",
                "type": "string"
              },
              "catalog_visibility": {
                "description": "Visibility of the course in catalogs and search results.",
                "type": "string",
                "enum": [
                  "catalog_search",
                  "catalog",
                  "search",
                  "hidden"
                ],
                "default": "catalog_search"
              },
              "categories": {
                "description": "List of course categories.",
                "type": "array",
                "default": [],
                "example": [
                  1,
                  2,
                  3
                ],
                "items": {
                  "type": "integer"
                }
              },
              "tags": {
                "description": "List of course tags.",
                "type": "array",
                "default": [],
                "example": [
                  4,
                  5,
                  6
                ],
                "items": {
                  "type": "integer"
                }
              },
              "difficulties": {
                "description": "List of course difficulties.",
                "type": "array",
                "default": [],
                "example": [
                  7
                ],
                "items": {
                  "type": "integer"
                }
              },
              "tracks": {
                "description": "List of course tracks.",
                "type": "array",
                "default": [],
                "example": [
                  8,
                  9
                ],
                "items": {
                  "type": "integer"
                }
              },
              "instructors": {
                "description": "List of course instructors. Defaults to current user when creating a new course.",
                "type": "array",
                "default": [],
                "example": [
                  1,
                  2,
                  3
                ],
                "items": {
                  "type": "integer"
                }
              },
              "audio_embed": {
                "description": "URL to an oEmbed enable audio URL.",
                "type": "string",
                "example": "https://open.spotify.com/track/trackid"
              },
              "video_embed": {
                "description": "URL to an oEmbed enable video URL.",
                "type": "string",
                "example": "https://www.youtube.com/watch?v=videoid"
              },
              "capacity": {
                "description": "Number of students who can be enrolled in the course before enrollment closes.",
                "type": "object",
                "properties": {
                  "limit": {
                    "description": "Number of students who can be enrolled in the course before enrollment closes.",
                    "type": "integer",
                    "example": 25
                  }
                }
              },
              "prerequisite": {
                "description": "Course ID of the prerequisite course.",
                "type": "integer",
                "example": 456
              },
              "prerequisite_track": {
                "description": "Term ID of a the prerequisite track.",
                "type": "integer",
                "example": 789
              },
              "access_period": {
                "description": "Defines a period within which enrolled students can access, view, and interact with restricted course content. These dates do not affect course enrollment, see `enrollment_period` to control the course enrollment period.",
                "type": "object",
                "properties": {
                  "opens": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "description": "Date when the course opens. If blank the course is considered open until the the closing date has passed. Format: `Y-m-d H:i:s`.",
                        "type": "string",
                        "example": "2019-05-20 17:22:05"
                      }
                    }
                  },
                  "closes": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "description": "Date when the course closes. If blank the course is considered open until the opening date has passed. Format: `Y-m-d H:i:s`.",
                        "type": "string",
                        "example": "2019-06-05 17:22:05"
                      }
                    }
                  }
                }
              },
              "enrollment_period": {
                "description": "Defines a period within which students can enroll into the course. These dates do not affect course content access, see `access_period` to control the course content access period.",
                "type": "object",
                "properties": {
                  "opens": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "description": "Date when course enrollment opens. If blank course enrollment is considered open until the the closing date has passed. Format: `Y-m-d H:i:s`.",
                        "type": "string",
                        "example": "2019-05-20 17:22:05"
                      }
                    }
                  },
                  "closes": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "description": "Date when course enrollment closes. If blank the course is considered open until the opening date has passed. Format: `Y-m-d H:i:s`.",
                        "type": "string",
                        "example": "2019-06-05 17:22:05"
                      }
                    }
                  }
                }
              },
              "sales_page": {
                "description": "Defines alternate content displayed to visitors and non-enrolled students when accessing the course.",
                "type": "object",
                "properties": {
                  "content_type": {
                    "description": "Determines the type of sales page content to display.<br> - `none` displays the course content.<br> - `content` displays alternate content from the `excerpt` property.<br> - `page` redirects to the WordPress page defined in `content_page_id`.<br> - `url` redirects to the URL defined in `content_page_url`.",
                    "type": "string",
                    "enum": [
                      "none",
                      "content",
                      "page",
                      "url"
                    ],
                    "default": "none"
                  },
                  "content_page_id": {
                    "description": "The WordPress page ID of the sales page.<br> Required when `content_type` equals `page`.<br> Only returned when the `content_type` equals `page`.",
                    "type": "integer",
                    "example": 543
                  },
                  "content_page_url": {
                    "description": "The URL of the sales page content.<br> Required when `content_type` equals `url`.<br> Only returned when the `content_type` equals `url`.",
                    "type": "string",
                    "example": "https://example.tld/custom-sales-page"
                  }
                }
              },
              "_links": {
                "type": "object",
                "readOnly": true,
                "properties": {
                  "self": {
                    "description": "REST URI to the course.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/courses/1234"
                        }
                      }
                    }
                  },
                  "collection": {
                    "description": "REST URI to the course collection.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/courses"
                        }
                      }
                    }
                  },
                  "enrollments": {
                    "description": "REST URI to the collection of the courses's enrollments.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/enrollments?post=1234"
                        }
                      }
                    }
                  },
                  "instructors": {
                    "description": "REST URI to the collection of the course's instructors.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/instructors?post=1234"
                        }
                      }
                    }
                  },
                  "prerequisites": {
                    "description": "REST URIs to course prerequisite resources.",
                    "type": "array",
                    "example": [
                      {
                        "type": "course",
                        "href": "/wp-json/llms/v1/courses/456"
                      },
                      {
                        "type": "track",
                        "href": "/wp-json/wp/v2/course_track/789"
                      }
                    ],
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "href": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "students": {
                    "description": "REST URI to the collection of the course's enrolled students.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/students?enrolled_in=1234"
                        }
                      }
                    }
                  },
                  "wp:featured_media": {
                    "description": "REST URI to the WordPress attachement image.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/wp/v2/media/987"
                        }
                      }
                    }
                  },
                  "wp:term": {
                    "description": "Collection of REST URIs to the course's taxonomy term information.",
                    "type": "array",
                    "example": [
                      {
                        "taxonomy": "course_cat",
                        "href": "/wp-json/wp-v2/course_cat?post=123"
                      },
                      {
                        "taxonomy": "course_tag",
                        "href": "/wp-json/wp-v2/course_tag?post=123"
                      },
                      {
                        "taxonomy": "course_difficulty",
                        "href": "/wp-json/wp-v2/course_difficulty?post=123"
                      },
                      {
                        "taxonomy": "course_track",
                        "href": "/wp-json/wp-v2/course_track?post=123"
                      }
                    ],
                    "items": {
                      "type": "object",
                      "properties": {
                        "taxonomy": {
                          "type": "string"
                        },
                        "href": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "CourseRequest": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "readOnly": true,
                "description": "Unique Course Identifier. The WordPress Post `ID`."
              }
            }
          },
          {
            "$ref": "#/components/schemas/PostContentRequest"
          },
          {
            "type": "object",
            "properties": {
              "access_period": {
                "type": "object",
                "properties": {
                  "opens": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "description": "Message displayed to enrolled students when the course is accessed before the opening date has passed.",
                        "type": "string",
                        "default": "This course opens on [lifterlms_course_info key=\"start_date\"]."
                      }
                    }
                  },
                  "closes": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "description": "Message displayed to enrolled students when the course is accessed after the closing date has passed.",
                        "type": "string",
                        "default": "This course closed on [lifterlms_course_info key=\"end_date\"]."
                      }
                    }
                  }
                }
              },
              "enrollment_period": {
                "type": "object",
                "properties": {
                  "opens": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "description": "Message displayed to visitors when the course is accessed before the opening date has passed.",
                        "type": "string",
                        "default": "Enrollment in this course opens on [lifterlms_course_info key=\"enrollment_start_date\"]."
                      }
                    }
                  },
                  "closes": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "description": "Message displayed to students and visitors when the course is accessed after the closing date has passed.",
                        "type": "string",
                        "default": "Enrollment in this course closed on [lifterlms_course_info key=\"enrollment_end_date\"]."
                      }
                    }
                  }
                }
              },
              "capacity": {
                "description": "Number of students who can be enrolled in the course before enrollment closes.",
                "type": "object",
                "properties": {
                  "capacity_message": {
                    "description": "Message displayed when enrollment capacity has been reached.",
                    "type": "string",
                    "default": "Enrollment has closed because the maximum number of allowed students has been reached."
                  }
                }
              },
              "length": {
                "description": "User defined course length.",
                "type": "string",
                "example": "7 days"
              },
              "restricted_message": {
                "description": "Message displayed when non-enrolled visitors try to access restricted course content (lessons, quizzes, etc..) directly.",
                "type": "string",
                "default": "You must enroll in this course to access course content."
              }
            }
          },
          {
            "$ref": "#/components/schemas/Course"
          }
        ]
      },
      "CourseResponse": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "readOnly": true,
                "description": "Unique Course Identifier. The WordPress Post `ID`."
              }
            }
          },
          {
            "$ref": "#/components/schemas/PostContentResponse"
          },
          {
            "type": "object",
            "properties": {
              "access_period": {
                "type": "object",
                "properties": {
                  "opens": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "description": "Message displayed to enrolled students when the course is accessed before the opening date has passed.",
                        "type": "object",
                        "properties": {
                          "rendered": {
                            "description": "Rendered message content.",
                            "type": "string",
                            "default": "This course opens on January, 28, 2019."
                          },
                          "raw": {
                            "description": "Raw message content.",
                            "type": "string",
                            "default": "This course opens on [lifterlms_course_info key=\"start_date\"]."
                          }
                        }
                      }
                    }
                  },
                  "closes": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "description": "Message displayed to enrolled students when the course is accessed after the closing date has passed.",
                        "type": "object",
                        "properties": {
                          "rendered": {
                            "description": "Rendered message content.",
                            "type": "string",
                            "default": "This course closed on March 5, 2018."
                          },
                          "raw": {
                            "description": "Raw message content.",
                            "type": "string",
                            "default": "This course closed on [lifterlms_course_info key=\"end_date\"]."
                          }
                        }
                      }
                    }
                  }
                }
              },
              "enrollment_period": {
                "type": "object",
                "properties": {
                  "opens": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "description": "Message displayed to visitors when the course is accessed before the opening date has passed.",
                        "type": "object",
                        "properties": {
                          "rendered": {
                            "description": "Rendered message content.",
                            "type": "string",
                            "default": "Enrollment in this course opens on opens on January, 28, 2019."
                          },
                          "raw": {
                            "description": "Raw message content.",
                            "type": "string",
                            "default": "Enrollment in this course opens on [lifterlms_course_info key=\"enrollment_start_date\"]."
                          }
                        }
                      }
                    }
                  },
                  "closes": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "description": "Message displayed to students and visitors when the course is accessed after the closing date has passed.",
                        "type": "object",
                        "properties": {
                          "rendered": {
                            "description": "Rendered message content.",
                            "type": "string",
                            "default": "Enrollment in this course closed on March 5, 2018."
                          },
                          "raw": {
                            "description": "Raw message content.",
                            "type": "string",
                            "default": "Enrollment in this course closed on [lifterlms_course_info key=\"enrollment_end_date\"]."
                          }
                        }
                      }
                    }
                  }
                }
              },
              "capacity": {
                "description": "Number of students who can be enrolled in the course before enrollment closes.",
                "type": "object",
                "properties": {
                  "capacity_message": {
                    "description": "Message displayed when enrollment capacity has been reached.",
                    "type": "object",
                    "properties": {
                      "rendered": {
                        "description": "Rendered message content.",
                        "type": "string",
                        "example": "Enrollment has closed because the maximum number of allowed students has been reached."
                      },
                      "raw": {
                        "description": "Raw message content.",
                        "type": "string",
                        "example": "Enrollment has closed because the maximum number of allowed students has been reached."
                      }
                    }
                  }
                }
              },
              "length": {
                "description": "User defined course length.",
                "type": "object",
                "properties": {
                  "rendered": {
                    "description": "Rendered length description.",
                    "type": "string",
                    "example": "7 days"
                  },
                  "raw": {
                    "description": "Raw length description.",
                    "type": "string",
                    "example": "7 days"
                  }
                }
              },
              "restricted_message": {
                "description": "Message displayed when non-enrolled visitors try to access restricted course content (lessons, quizzes, etc..) directly.",
                "type": "object",
                "properties": {
                  "rendered": {
                    "description": "Rendered message content.",
                    "type": "string",
                    "default": "You must enroll in this course to access course content."
                  },
                  "raw": {
                    "description": "Raw message content.",
                    "type": "string",
                    "default": "You must enroll in this course to access course content."
                  }
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/Course"
          }
        ]
      },
      "Enrollment": {
        "type": "object",
        "required": [
          "id",
          "student_id",
          "post_id"
        ],
        "properties": {
          "id": {
            "allOf": [
              {
                "description": "Unique enrollment Identifier."
              },
              {
                "example": 987
              },
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "student_id": {
            "description": "The ID of the student.",
            "type": "integer",
            "minimum": 1,
            "example": 123
          },
          "post_id": {
            "description": "The ID of the course/membership.",
            "type": "integer",
            "minimum": 1,
            "example": 456
          },
          "date_created": {
            "description": "The enrollment creation date. Format: `Y-m-d H:i:s`",
            "type": "string",
            "example": "2019-05-21 14:22:05"
          },
          "date_updated": {
            "description": "The date of the last enrollment update. Format: `Y-m-d H:i:s`",
            "type": "string",
            "example": "2019-05-21 19:22:05",
            "readOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/EnrollmentStatus"
          },
          "_links": {
            "readOnly": true,
            "type": "object",
            "properties": {
              "self": {
                "description": "REST URI to the enrollment.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/enrollments/987"
                    }
                  }
                }
              },
              "collection": {
                "description": "REST URI to the enrollments collection.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/enrollments/"
                    }
                  }
                }
              },
              "post": {
                "description": "Rest URI to the post resource.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/courses/456"
                    }
                  }
                }
              },
              "student": {
                "description": "Rest URI to the student resource.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string",
                      "example": "/wp-json/llms/v1/students/123"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "EnrollmentStatus": {
        "description": "The status of the enrollment.",
        "type": "string",
        "enum": [
          "enrolled",
          "expired",
          "cancelled",
          "none"
        ],
        "default": "enrolled"
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "description": "The API error code."
          },
          "message": {
            "description": "The API error message."
          },
          "data": {
            "description": "Additional response data.",
            "type": "object",
            "properties": {
              "status": {
                "minimum": 100,
                "maximum": 600,
                "description": "The HTTP status code."
              }
            }
          }
        }
      },
      "Error400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "properties": {
              "code": {
                "default": "llms_rest_bad_request",
                "type": "string"
              },
              "message": {
                "default": "Invalid or malformed request syntax.",
                "type": "string"
              },
              "data": {
                "properties": {
                  "status": {
                    "default": 400,
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      },
      "Error401": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "properties": {
              "code": {
                "default": "llms_rest_unauthorized_request",
                "type": "string"
              },
              "message": {
                "default": "The API credentials were invalid.",
                "type": "string"
              },
              "data": {
                "properties": {
                  "status": {
                    "default": 401,
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      },
      "Error403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "properties": {
              "code": {
                "default": "llms_rest_forbidden_request",
                "type": "string"
              },
              "message": {
                "default": "You are not authorized to perform this request.",
                "type": "string"
              },
              "data": {
                "properties": {
                  "status": {
                    "default": 403,
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      },
      "Error404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "properties": {
              "code": {
                "default": "llms_rest_not_found",
                "type": "string"
              },
              "message": {
                "default": "The requested resource could not be found.",
                "type": "string"
              },
              "data": {
                "properties": {
                  "status": {
                    "default": 404,
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      },
      "Instructor": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Unique Instructor Identifer. The WordPress User `ID`."
              }
            }
          },
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "type": "object",
            "properties": {
              "role": {
                "type": "string",
                "enum": [
                  "lms_manager",
                  "instructor",
                  "instructors_assistant"
                ],
                "default": "instructor"
              },
              "_links": {
                "type": "object",
                "readOnly": true,
                "properties": {
                  "self": {
                    "description": "REST URI to the instructor.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/instructors/1234"
                        }
                      }
                    }
                  },
                  "collection": {
                    "description": "REST URI to the instructor collection.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/instructors"
                        }
                      }
                    }
                  },
                  "content": {
                    "description": "REST URI to a collection of the instructor's content.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/instructors/1234/contents"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "Post": {
        "description": "Reduced WordPress Post object properties shared by LifterLMS custom post types",
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "allOf": [
              {
                "description": "Unique Post Identifier. The WordPress Post `ID`."
              },
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "date_created": {
            "description": "Creation date. Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 17:22:05"
          },
          "date_created_gmt": {
            "description": "Creation date (in GMT). Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 13:22:05"
          },
          "date_updated": {
            "description": "Date last modified. Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 17:25:05",
            "readOnly": true
          },
          "date_updated_gmt": {
            "description": "Date last modified (in GMT). Format: `Y-m-d H:i:s`.",
            "type": "string",
            "example": "2019-05-20 13:25:05",
            "readOnly": true
          },
          "menu_order": {
            "description": "Custom post sort order.",
            "type": "integer",
            "default": 0,
            "minimum": 0
          }
        }
      },
      "PostContentRequest": {
        "description": "Post content request fields.",
        "type": "object",
        "required": [
          "title",
          "content"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Raw title. Useful when displaying title in the WP Block Editor. Only returned in `edit` context.",
            "example": "Getting Started with LifterLMS"
          },
          "content": {
            "type": "string",
            "description": "Raw post content. Useful when displaying title in the WP Block Editor. Only returned in `edit` context.",
            "example": "<!-- wp:heading -->\\n<h2>Lorem ipsum dolor sit amet.</h2>\\n<!-- /wp:heading -->\\n\\n<!-- wp:paragraph -->\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\n<!-- /wp:paragraph -->"
          },
          "excerpt": {
            "type": "string",
            "description": "Raw HTML content. Useful when displaying title in the WP Block Editor. Only returned in `edit` context.",
            "example": "Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus."
          }
        }
      },
      "PostContentResponse": {
        "description": "Post content fields.",
        "type": "object",
        "properties": {
          "title": {
            "type": "object",
            "properties": {
              "rendered": {
                "type": "string",
                "description": "Rendered title.",
                "example": "Getting Started with LifterLMS"
              },
              "raw": {
                "type": "string",
                "description": "Raw title. Useful when displaying title in the WP Block Editor. Only returned in `edit` context.",
                "example": "Getting Started with LifterLMS"
              }
            }
          },
          "content": {
            "type": "object",
            "properties": {
              "rendered": {
                "type": "string",
                "description": "Rendered post content.",
                "example": "\\n<h2>Lorem ipsum dolor sit amet.</h2>\\n\\n\\n\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\n"
              },
              "raw": {
                "type": "string",
                "description": "Raw post content. Useful when displaying title in the WP Block Editor. Only returned in `edit` context.",
                "example": "<!-- wp:heading -->\\n<h2>Lorem ipsum dolor sit amet.</h2>\\n<!-- /wp:heading -->\\n\\n<!-- wp:paragraph -->\\n<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>\\n<!-- /wp:paragraph -->"
              }
            }
          },
          "excerpt": {
            "type": "object",
            "properties": {
              "rendered": {
                "type": "string",
                "description": "Rendered HTML content.",
                "example": "<p>Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus.</p>"
              },
              "raw": {
                "type": "string",
                "description": "Raw HTML content. Useful when displaying title in the WP Block Editor. Only returned in `edit` context.",
                "example": "Expectoque quid ad id, quod quaerebam, respondeas. Nec enim, omnes avaritias si aeque avaritias esse dixerimus, sequetur ut etiam aequas esse dicamus."
              }
            }
          }
        }
      },
      "PostPublic": {
        "description": "Reduced WordPress Post object properties shared by LifterLMS custom post types",
        "allOf": [
          {
            "$ref": "#/components/schemas/Post"
          },
          {
            "type": "object",
            "properties": {
              "slug": {
                "description": "Post URL slug.",
                "type": "string",
                "example": "getting-started-with-lifterlms"
              },
              "permalink": {
                "description": "Post URL.",
                "type": "string",
                "example": "https://example.com/post/getting-started-with-lifterlms",
                "readOnly": true
              },
              "post_type": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PostType"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/PostStatus"
              },
              "password": {
                "description": "Password used to protect access to the content.<br>Readable only in `edit` context.",
                "type": "string",
                "example": "p4$sW0rd"
              },
              "featured_media": {
                "description": "Featured image ID.",
                "type": "integer",
                "example": 987
              },
              "comment_status": {
                "description": "Post comment status. Default comment status dependent upon general WordPress post discussion settings.",
                "type": "string",
                "enum": [
                  "open",
                  "closed"
                ],
                "default": "open"
              },
              "ping_status": {
                "description": "Post ping status. Default ping status dependent upon general WordPress post discussion settings.",
                "type": "string",
                "enum": [
                  "open",
                  "closed"
                ],
                "default": "open"
              }
            }
          }
        ]
      },
      "PostStatus": {
        "description": "The publication status of the course.",
        "type": "string",
        "enum": [
          "publish",
          "pending",
          "draft",
          "auto-draft",
          "future",
          "private",
          "trash"
        ],
        "default": "publish"
      },
      "PostType": {
        "description": "LifterLMS custom post types available for enrollments",
        "type": "string",
        "enum": [
          "course",
          "llms_membership"
        ],
        "default": "course"
      },
      "ResourceId": {
        "description": "Unique Resource Identifier.",
        "type": "integer",
        "minimum": 1,
        "example": 123,
        "readOnly": true
      },
      "Student": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Unique Student Identifer. The WordPress User `ID`."
              }
            }
          },
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "type": "object",
            "properties": {
              "role": {
                "type": "string",
                "enum": [
                  "student"
                ],
                "default": "student",
                "readOnly": true
              },
              "_links": {
                "type": "object",
                "readOnly": true,
                "properties": {
                  "self": {
                    "description": "REST URI to the student.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/students/1234"
                        }
                      }
                    }
                  },
                  "collection": {
                    "description": "REST URI to the student collection.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/students"
                        }
                      }
                    }
                  },
                  "content": {
                    "description": "REST URI to a collection of the student's content.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/students/1234/contents"
                        }
                      }
                    }
                  },
                  "enrollments": {
                    "description": "REST URI to a collection of the student's enrollments.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "example": "/wp-json/llms/v1/enrollments?student=1234"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "User": {
        "description": "Reduced WordPress User object properties shared by LifterLMS custom user types",
        "type": "object",
        "required": [
          "id",
          "email",
          "username"
        ],
        "properties": {
          "id": {
            "allOf": [
              {
                "description": "Unique User Identifer. The WordPress User `ID`."
              },
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "email": {
            "description": "The user's email address.",
            "type": "string",
            "example": "jamie@lifterlms.com"
          },
          "username": {
            "description": "The user's username.",
            "type": "string",
            "example": "jamie2019"
          },
          "password": {
            "description": "The user's password.",
            "type": "string",
            "example": "my_l337-p@$5w0rd!",
            "writeOnly": true
          },
          "role": {
            "description": "The user's WordPress user role.",
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/UserName"
          },
          "billing_address": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "UserName": {
        "type": "object",
        "properties": {
          "first": {
            "description": "The person's first name.",
            "type": "string",
            "example": "Jamie"
          },
          "last": {
            "description": "The person's last name.",
            "type": "string",
            "example": "Cook"
          },
          "display": {
            "description": "The person's public display name.",
            "type": "string",
            "example": "Jamie Cook"
          }
        }
      }
    },
    "responses": {
      "Error400": {
        "x-summary": "Bad request.",
        "description": "Invalid or malformed request syntax.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error400"
            }
          }
        }
      },
      "Error401": {
        "x-summary": "Unauthorized.",
        "description": "Invalid API Credentials.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error401"
            }
          }
        }
      },
      "Error403": {
        "x-summary": "Forbidden.",
        "description": "The client does not have access to perform the requested action.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error403"
            }
          }
        }
      },
      "Error404": {
        "x-summary": "Not Found.",
        "description": "The requested resource could not be located.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error404"
            }
          }
        }
      }
    },
    "parameters": {
      "Context": {
        "name": "context",
        "in": "query",
        "description": "Specify the scope under which the request is made. `edit` should be used when requesting content to be modified; `view` should be used when requesting content to be displayed.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "view",
            "edit"
          ],
          "default": "view"
        }
      },
      "EnrollmentStatus": {
        "name": "enrollment_status",
        "in": "query",
        "description": "Limit results by enrollment status.",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/EnrollmentStatus"
        }
      },
      "Exclude": {
        "name": "exclude",
        "in": "query",
        "description": "Exclude a list of `id`s from results. Accepts a single `id` or a comma separated list of `id`s.",
        "schema": {
          "type": "string",
          "example": "10,11,12"
        }
      },
      "Include": {
        "name": "include",
        "in": "query",
        "description": "Limit results to a list of `id`s. Accepts a single `id` or a comma separated list of `id`s.",
        "schema": {
          "type": "string",
          "example": "1,2,3"
        }
      },
      "Order": {
        "name": "order",
        "in": "query",
        "description": "Specifcy the sort order for a collection of results.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "default": "asc"
        }
      },
      "Page": {
        "name": "page",
        "in": "query",
        "description": "Specify the page number for a paginated collection.",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1
        }
      },
      "PerPage": {
        "name": "per_page",
        "in": "query",
        "description": "Specify the number of results per paginated collection page.",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 10
        }
      },
      "PostPassword": {
        "name": "password",
        "in": "query",
        "description": "Post password. Required if the post is password protected.",
        "required": false,
        "schema": {
          "type": "string",
          "example": "p4$sW0rd"
        }
      },
      "PostType": {
        "name": "post_type",
        "in": "query",
        "description": "Filter results to those of a specific `post_type`.",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/PostType"
        }
      }
    },
    "headers": {
      "PaginationTotalPages": {
        "description": "Total number of pages available in the collection.",
        "schema": {
          "type": "integer",
          "example": 28
        }
      },
      "PaginationTotalResults": {
        "description": "Total number of results found in the collection.",
        "schema": {
          "type": "integer",
          "example": 275
        }
      }
    },
    "securitySchemes": {
      "BasicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
