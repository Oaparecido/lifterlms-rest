openapi: 3.0.0
info:
  version: 1.0.0
  title: LifterLMS REST API
  description: >-
    # Introduction

    LifterLMS (LLMS) is fully integrated with the [WordPress REST API](https://developer.wordpress.org/rest-api/). This allows LifterLMS data to be created, read, updated, and deleted using requests in JSON format and using WordPress REST API Authentication methods and standard HTTP verbs which are understood by most HTTP clients.

    ## Requirements

    To use the latest version of the REST API you must be using the following:

      + LifterLMS [@version]+.
      + WordPress 5.2+.
      + Pretty permalinks in `Settings -> Permalinks` so that the custom endpoints are supported. **Default permalinks will not work.**
      + An SSL certificate.

    ## Errors

    asrtasrtarst

    # Authentication

    Requests to most API resources require authentication. Authentication can be preformed by providing API Credentials by using as the username and password via [HTTP Basic Authentication](http://en.wikipedia.org/wiki/Basic_access_authentication) or through request headers.


    Requests to the REST API may only be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Requests made over HTTP will fail.

    ## Basic Authentication

    The preferred authentication method is HTTP Basic Authentication.

    To use HTTP Basic Auth, provide the Consumer Key as the username and the Consumer Secret as the password.

    ```
      curl https://example.tld/wp-json/llms/v1/courses \
        -u ck_d7W85twOWT0poKzDSAQzI7:sk_8bsMmRfjW1HgEFw5ad7BIF
    ```

    ## Header Authentication

    Alternatively, requests may be authenticated by providing the Consumer Key and Consumer secret as the request headers `X-CONSUMER-KEY` and `X-CONSUMER-SECRET`.

    ```
      curl https://example.tld/wp-json/llms/v1/courses \
        -H X-CONSUMER-KEY: ck_d7W85twOWT0poKzDSAQzI7 \
        -H X-CONSUMER-SECRET: sk_8bsMmRfjW1HgEFw5ad7BIF
    ```

  x-logo:
    altText: LifterLMS
    url: "https://gocodebox.github.io/lifterlms-brand/assets/img/png/logo/lifterlms-logo.png"
    href: "https://lifterlms.com/"

servers:
  - url: /wp-json/llms/v1

security:
  - Basic-Authentication: []

tags:

  - name: Access Plans
    description: |
      Access plans allow you to define how LMS content is purchased and accessed by your students.

      The access plans API allows you to create, view, update, and delete courses.

  - name: Courses
    description: |
      The courses API allows you to create, view, update, and delete courses.

  - name: Instructors
    description: |
      Instructors are members of your site who have the ability to create and manage LMS content and students. Instructors may be Adminstators, LMS Managers, Instructors, and Instructors Assistants.

      The instructors API allows you to create, view, update, and delete student accounts.

  - name: Memberships
    description: |
      The memberships API allows you to create, view, update, and delete memberships.

  - name: Sections
    description: |
      The sections API allows you to create, view, update, and delete sections.

      Sections are used within courses to organize content (lessons) into groups.

  - name: Students
    description: |
      Students are members of your site who are (or were) enrolled in your courses and memberships. Students can be any WordPress user account on your site (not exclusively the "student" role).

      The students API allows you to create, view, update, and delete student accounts  as well as view information about the student's LMS content.

  - name: Student Enrollments
    description: |
      The Student Enrollments API allows you to create, view, update, and delete records of a student's enrollment into courses and memberships.

  - name: Student Progress
    description: |
      The Student Progress API allows you to create, view, update, and delete a student's progress through courses.

      A student's progress through a course is calculated by dividing the number of lessons completed by the student by the total number of lessons available in a course. It is not possible to manually update the `progress` percentage property of a course, instead you must update the status of each lesson in the course.

      When updating the status of a course or a section, the status of the lessons within that course or section will be automatically updated to match the status of the course or section. For example, when updating a course's status to `complete` a new `complete` progress record will be created/updated for each incomplete lesson in the course.

      Finally, the `progress` property of a lesson will _always_ be either `0` _or_ `100` whereas the `progress` of courses and sections will range from `0` _to_ `100`.

  - name: Webhooks
    description: |
      Webhooks can be created to notify you about LMS-related events that happen on your site.

      The Webhooks API allows you to create, view, update, and delete webhooks.

      Webhooks may additionally be managed on the LifterLMS Webhooks screen on your site's WordPress admin panel.

      ## Topics

      The `topic` is a combination of the resource (e.g. student) and event (e.g. created). Each `topic` maps to one or more hook names (e.g. `llms_user_registered`). The proper hooks are automatically added based on the `topic`.

      The following topics are available:

      + Courses
        + `course.created`
        + `course.updated`
        + `course.deleted`
        + `course.restored`
      + Sections
        + `section.created`
        + `section.updated`
        + `section.deleted`
        + `section.restored`
      + Lessons
        + `lesson.created`
        + `lesson.updated`
        + `lesson.deleted`
        + `lesson.restored`
      + Memberships
        + `membership.created`
        + `membership.updated`
        + `membership.deleted`
        + `membership.restored`
      + Access Plans
        + `access_plan.created`
        + `access_plan.updated`
        + `access_plan.deleted`
        + `access_plan.restored`
      + Orders
        + `order.created`
        + `order.updated`
        + `order.deleted`
        + `order.restored`
      + Transaction
        + `transaction.created`
        + `transaction.updated`
        + `transaction.deleted`
      + Students
        + `student.created`
        + `student.updated`
        + `student.deleted`
      + Student Enrollment
        + `enrollment.created`
        + `enrollment.updated`
        + `enrollment.deleted`
      + Student Progress
        + `progress.updated`
        + `progress.deleted`
      + Instructors
        + `instructor.created`
        + `instructor.updated`
        + `instructor.deleted`

      Custom topics can also be used in order to create a webhook triggered by an arbitrary WordPress hook. For a custom topic use the `action` resource with any hook as the event. For example, to create a webhook triggered by the `user_register` hook the topic would be `action.user_register`.

x-tagGroups:

  - name: Courses
    tags:
      - Courses
      - Sections
      - Lessons

  - name: E-Commerce
    tags:
      - Access Plans

  - name: Instructors
    tags:
      - Instructors

  - name: Memberships
    tags:
      - Memberships

  - name: Students
    tags:
      - Students
      - Student Enrollments
      - Student Progress

  - name: Webhooks
    tags:
      - Webhooks
